# NOTE IF CHANGING THIS FILE, ALSO APPLY THE CHANGE TO appveyor-woa.yml
# IF APPLICABLE!!!!
#
#
# The config expects the following environment variables to be set:
#  - "GN_CONFIG" Build type. One of {'testing', 'release'}.
#  - "GN_EXTRA_ARGS" Additional gn arguments for a build config,
#      e.g. 'target_cpu="x86"' to build for a 32bit platform.
#      https://gn.googlesource.com/gn/+/main/docs/reference.md#var_target_cpu
#      Don't forget to set up "NPM_CONFIG_ARCH" and "TARGET_ARCH" accordingly
#      if you pass a custom value for 'target_cpu'.
#  - "ELECTRON_RELEASE" Set it to '1' upload binaries on success.
#  - "NPM_CONFIG_ARCH" E.g. 'x86'. Is used to build native Node.js modules.
#      Must match 'target_cpu' passed to "GN_EXTRA_ARGS" and "TARGET_ARCH" value.
#  - "TARGET_ARCH" Choose from {'ia32', 'x64', 'arm', 'arm64'}.
#      Is used in some publishing scripts, but does NOT affect the Electron binary.
#      Must match 'target_cpu' passed to "GN_EXTRA_ARGS" and "NPM_CONFIG_ARCH" value.
#  - "UPLOAD_TO_STORAGE" Set it to '1' upload a release to the Azure bucket.
#      Otherwise the release will be uploaded to the GitHub Releases.
#      (The value is only checked if "ELECTRON_RELEASE" is defined.)
#
# The publishing scripts expect access tokens to be defined as env vars,
# but those are not covered here.
#
# AppVeyor docs on variables:
# https://www.appveyor.com/docs/environment-variables/
# https://www.appveyor.com/docs/build-configuration/#secure-variables
# https://www.appveyor.com/docs/build-configuration/#custom-environment-variables

version: 1.0.{build}
build_cloud: electronhq-16-core
image: e-114.0.5710.0
environment:
  GIT_CACHE_PATH: C:\Users\appveyor\libcc_cache
  ELECTRON_OUT_DIR: Default
  ELECTRON_ENABLE_STACK_DUMPING: 1
  ELECTRON_ALSO_LOG_TO_STDERR: 1
  MOCHA_REPORTER: mocha-multi-reporters
  MOCHA_MULTI_REPORTERS: "@marshallofsound/mocha-appveyor-reporter, tap"
  GOMA_FALLBACK_ON_AUTH_FAILURE: true
  DEPOT_TOOLS_WIN_TOOLCHAIN: 0
  PYTHONIOENCODING: UTF-8

  matrix:

    - job_name: Build
    - job_name: Test
      job_depends_on: Build

clone_folder: C:\projects\src\electron

skip_branch_with_pr: true

# the first failed job cancels other jobs and fails entire build
matrix:
  fast_finish: true

for:

  - matrix:
      only:
        - job_name: Build

    build_script:
      - ps: |
          node script/yarn.js install --frozen-lockfile
          node script/doc-only-change.js --prNumber=$env:APPVEYOR_PULL_REQUEST_NUMBER --prBranch=$env:APPVEYOR_REPO_BRANCH
          if ($LASTEXITCODE -eq 0) {
            Write-warning "Skipping build for doc only change"; Exit-AppveyorBuild
          }
          $global:LASTEXITCODE = 0
      - cd ..
      - ps: Write-Host "Building $env:GN_CONFIG build"
      - git config --global core.longpaths true
      - ps: >-
          if (Test-Path -Path "$pwd\depot_tools") {
            Remove-Item -Recurse -Force $pwd\depot_tools
          }
      - ps: >-
          if (Test-Path -Path "$pwd\build-tools") {
            Remove-Item -Recurse -Force $pwd\build-tools
          }
      - git clone --depth=1 https://chromium.googlesource.com/chromium/tools/depot_tools.git
      - ps: $env:PATH="$pwd\depot_tools;$env:PATH"
      - ps: >-
          if (Test-Path -Path "$pwd\src\electron") {
            Remove-Item -Recurse -Force $pwd\src\electron
          }
      - ps: >-
          if (Test-Path 'env:RAW_GOMA_AUTH') {
            $env:GOMA_OAUTH2_CONFIG_FILE = "$pwd\.goma_oauth2_config"
            $env:RAW_GOMA_AUTH | Set-Content $env:GOMA_OAUTH2_CONFIG_FILE
          }
      - git clone https://github.com/electron/build-tools.git
      - cd build-tools
      - npm install
      - mkdir third_party
      - ps: >-
          node -e "require('./src/utils/goma.js').downloadAndPrepare({ gomaOneForAll: true })"
      - ps: $env:GN_GOMA_FILE = node -e "console.log(require('./src/utils/goma.js').gnFilePath)"
      - ps: $env:LOCAL_GOMA_DIR = node -e "console.log(require('./src/utils/goma.js').dir)"
      - cd ..\..
      - ps: .\src\electron\script\start-goma.ps1 -gomaDir $env:LOCAL_GOMA_DIR
      - ps: >-
          if (Test-Path 'env:RAW_GOMA_AUTH') {
            $goma_login = python $env:LOCAL_GOMA_DIR\goma_auth.py info
            if ($goma_login -eq 'Login as Fermi Planck') {
              Write-warning "Goma authentication is correct";
            } else {
              Write-warning "WARNING!!!!!! Goma authentication is incorrect; please update Goma auth token.";
              $host.SetShouldExit(1)
            }
          }
      - ps: $env:CHROMIUM_BUILDTOOLS_PATH="$pwd\src\buildtools"
      - ps: >-
          if ($env:GN_CONFIG -ne 'release') {
            $env:NINJA_STATUS="[%r processes, %f/%t @ %o/s : %es] "
          }
      - gclient config --name "src\electron" --unmanaged %GCLIENT_EXTRA_ARGS% "https://github.com/electron/electron"
      # Patches are applied in the image bake. Check depshash to see if patches have changed.
      - ps: $env:RUN_GCLIENT_SYNC="false"
      - ps: $depshash_baked = Get-Content .\src\.depshash -Raw
      - ps: cd src\electron
      - ps: node script\generate-deps-hash.js
      - ps: $depshash = Get-Content .\.depshash -Raw
      - ps: cd ..\..
      - ps: >-
          if ($depshash_baked -ne $depshash) {
            $env:RUN_GCLIENT_SYNC="true"
          }
      - if "%RUN_GCLIENT_SYNC%"=="true" ( gclient sync --with_branch_heads --with_tags ) else ( gclient runhooks )
      - cd src
      - ps: $env:PATH="$pwd\third_party\ninja;$env:PATH"
      - set BUILD_CONFIG_PATH=//electron/build/args/%GN_CONFIG%.gn
      - gn gen out/Default "--args=import(\"%BUILD_CONFIG_PATH%\") import(\"%GN_GOMA_FILE%\") %GN_EXTRA_ARGS% "
      - gn check out/Default //electron:electron_lib
      - gn check out/Default //electron:electron_app
      - gn check out/Default //electron/shell/common/api:mojo
      - if DEFINED GN_GOMA_FILE (ninja -j 300 -C out/Default electron:electron_app) else (ninja -C out/Default electron:electron_app)
      - if "%GN_CONFIG%"=="testing" ( python C:\depot_tools\post_build_ninja_summary.py -C out\Default )
      - gn gen out/ffmpeg "--args=import(\"//electron/build/args/ffmpeg.gn\") %GN_EXTRA_ARGS%"
      - ninja -C out/ffmpeg electron:electron_ffmpeg_zip
      - ninja -C out/Default electron:electron_dist_zip
      - ninja -C out/Default shell_browser_ui_unittests
      - gn desc out/Default v8:run_mksnapshot_default args > out/Default/default_mksnapshot_args
      # Remove unused args from mksnapshot_args
      - ps: >-
          Get-Content out/Default/default_mksnapshot_args | Where-Object { -not $_.Contains('--turbo-profiling-input') -And -not $_.Contains('builtins-pgo') } | Set-Content out/Default/mksnapshot_args
      - ninja -C out/Default electron:electron_mksnapshot_zip
      - cd out\Default
      - 7z a mksnapshot.zip mksnapshot_args gen\v8\embedded.S
      - cd ..\..
      - ninja -C out/Default electron:hunspell_dictionaries_zip
      - ninja -C out/Default electron:electron_chromedriver_zip
      - ninja -C out/Default third_party/electron_node:headers
      - python %LOCAL_GOMA_DIR%\goma_ctl.py stat
      - ps: >-
          Get-CimInstance -Namespace root\cimv2 -Class Win32_product | Select vendor, description, @{l='install_location';e='InstallLocation'}, @{l='install_date';e='InstallDate'}, @{l='install_date_2';e='InstallDate2'}, caption, version, name, @{l='sku_number';e='SKUNumber'} | ConvertTo-Json | Out-File -Encoding utf8 -FilePath .\installed_software.json
      - python3 electron/build/profile_toolchain.py --output-json=out/Default/windows_toolchain_profile.json
      - 7z a node_headers.zip out\Default\gen\node_headers
      - ps: >-
          if ($env:GN_CONFIG -eq 'release') {
            # Needed for msdia140.dll on 64-bit windows
            $env:Path += ";$pwd\third_party\llvm-build\Release+Asserts\bin"
            ninja -C out/Default electron:electron_symbols
          }
      - ps: >-
          if ($env:GN_CONFIG -eq 'release') {
            python3 electron\script\zip-symbols.py
            appveyor-retry appveyor PushArtifact out/Default/symbols.zip
          } else {
            # It's useful to have pdb files when debugging testing builds that are
            # built on CI.
            7z a pdb.zip out\Default\*.pdb
          }
      - python3 electron/script/zip_manifests/check-zip-manifest.py out/Default/dist.zip electron/script/zip_manifests/dist_zip.win.%TARGET_ARCH%.manifest

    deploy_script:
      - cd electron
      - ps: >-
          if (Test-Path Env:\ELECTRON_RELEASE) {
            if (Test-Path Env:\UPLOAD_TO_STORAGE) {
              Write-Output "Uploading Electron release distribution to azure"
              & python3 script\release\uploaders\upload.py --verbose --upload_to_storage
            } else {
              Write-Output "Uploading Electron release distribution to github releases"
              & python3 script\release\uploaders\upload.py --verbose
            }
          }
    on_finish:
      # Uncomment this lines to enable RDP
      # - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
      - cd C:\projects\src
      - if exist out\Default\windows_toolchain_profile.json ( appveyor-retry appveyor PushArtifact out\Default\windows_toolchain_profile.json )
      - if exist out\Default\dist.zip (appveyor-retry appveyor PushArtifact out\Default\dist.zip)
      - if exist out\Default\shell_browser_ui_unittests.exe (appveyor-retry appveyor PushArtifact out\Default\shell_browser_ui_unittests.exe)
      - if exist out\Default\chromedriver.zip (appveyor-retry appveyor PushArtifact out\Default\chromedriver.zip)
      - if exist out\ffmpeg\ffmpeg.zip (appveyor-retry appveyor PushArtifact out\ffmpeg\ffmpeg.zip)
      - if exist node_headers.zip (appveyor-retry appveyor PushArtifact node_headers.zip)
      - if exist out\Default\mksnapshot.zip (appveyor-retry appveyor PushArtifact out\Default\mksnapshot.zip)
      - if exist out\Default\hunspell_dictionaries.zip (appveyor-retry appveyor PushArtifact out\Default\hunspell_dictionaries.zip)
      - if exist out\Default\electron.lib (appveyor-retry appveyor PushArtifact out\Default\electron.lib)
      - ps: >-
          if ((Test-Path "pdb.zip") -And ($env:GN_CONFIG -ne 'release')) {
            appveyor-retry appveyor PushArtifact pdb.zip
          }
  - matrix:
      only:
        - job_name: Test

    init:
      - ps: |
          if ($env:RUN_TESTS -ne 'true') {
            Write-warning "Skipping tests for $env:APPVEYOR_PROJECT_NAME"; Exit-AppveyorBuild
          }
    build_script:
      - ps: |
          node script/yarn.js install --frozen-lockfile
          node script/doc-only-change.js --prNumber=$env:APPVEYOR_PULL_REQUEST_NUMBER --prBranch=$env:APPVEYOR_REPO_BRANCH
          if ($LASTEXITCODE -eq 0) {
            Write-warning "Skipping build for doc only change"; Exit-AppveyorBuild
          }
          $global:LASTEXITCODE = 0
      - cd ..
      - mkdir out\Default
      - cd ..
      - ps: |
          # Download build artifacts
          $apiUrl = 'https://ci.appveyor.com/api'
          $build_info = Invoke-RestMethod -Method Get -Uri "$apiUrl/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/builds/$env:APPVEYOR_BUILD_ID"
          $artifacts_to_download = @('dist.zip','shell_browser_ui_unittests.exe','chromedriver.zip','ffmpeg.zip','node_headers.zip','mksnapshot.zip','electron.lib')
          foreach ($job in $build_info.build.jobs) {
            if ($job.name -eq "Build") {
              $jobId = $job.jobId
              foreach($artifact_name in $artifacts_to_download) {
                if ($artifact_name -eq 'shell_browser_ui_unittests.exe' -Or $artifact_name -eq 'electron.lib') {
                  $outfile = "src\out\Default\$artifact_name"
                } else {
                  $outfile = $artifact_name
                }
                Invoke-RestMethod -Method Get -Uri "$apiUrl/buildjobs/$jobId/artifacts/$artifact_name" -OutFile $outfile
              }
            }
          }
      - ps: |
          $out_default_zips = @('dist.zip','chromedriver.zip','mksnapshot.zip')
          foreach($zip_name in $out_default_zips) {
            7z x -y -osrc\out\Default $zip_name
          }
      - ps: 7z x -y -osrc\out\ffmpeg ffmpeg.zip
      - ps: 7z x -y -osrc node_headers.zip

    test_script:
      # Workaround for https://github.com/appveyor/ci/issues/2420
      - set "PATH=%PATH%;C:\Program Files\Git\mingw64\libexec\git-core"
      - ps: |
          cd src
          New-Item .\out\Default\gen\node_headers\Release -Type directory
          Copy-Item -path .\out\Default\electron.lib -destination .\out\Default\gen\node_headers\Release\node.lib
      - cd electron
      # Explicitly set npm_config_arch because the .env doesn't persist
      - ps: >-
          if ($env:TARGET_ARCH -eq 'ia32') {
            $env:npm_config_arch = "ia32"
          }
      - echo Running main test suite & node script/yarn test -- --trace-uncaught --runners=main --enable-logging=file --log-file=%cd%\electron.log
      - echo Running native test suite & node script/yarn test -- --trace-uncaught --runners=native --enable-logging=file --log-file=%cd%\electron.log
      - cd ..
      - echo Verifying non proprietary ffmpeg & python electron\script\verify-ffmpeg.py --build-dir out\Default --source-root %cd% --ffmpeg-path out\ffmpeg
      - echo "About to verify mksnapshot"
      - echo Verifying mksnapshot & python electron\script\verify-mksnapshot.py --build-dir out\Default --source-root %cd%
      - echo "Done verifying mksnapshot"
      - echo Verifying chromedriver & python electron\script\verify-chromedriver.py --build-dir out\Default --source-root %cd%
      - echo "Done verifying chromedriver"

    on_finish:
      # Uncomment these lines to enable RDP
      # - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
      - if exist electron\electron.log ( appveyor-retry appveyor PushArtifact electron\electron.log )